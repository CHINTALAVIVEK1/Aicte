# -*- coding: utf-8 -*-
"""stock price predction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gzpkdkr-v2Hz3g64Y_C0dOASAGCCc3cL
"""

!pip install yfinance scikit-learn matplotlib seaborn --quiet

# üìö Import libraries
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# üìà List of 10 stocks
tickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'META', 'NVDA', 'NFLX', 'JPM', 'DIS']

# üîÅ Loop through each stock
for ticker in tickers:
    # Download 5 years of data
    df = yf.download(ticker, period="5y")
    df = df[['Close']].dropna()
    df.reset_index(inplace=True)

    # Feature engineering
    df['Days'] = (df['Date'] - df['Date'].min()).dt.days
    X = df[['Days']]
    y = df['Close']

    # Split into train and test
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

    # Train Random Forest model
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    # Evaluate performance
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)

    print(f"\nüìä [{ticker}]")
    print(f"  - RMSE: {rmse:.2f}")
    print(f"  - R¬≤ Score: {r2:.3f}")

    # Plot Actual vs Predicted
    plt.figure(figsize=(12,5))
    plt.plot(df['Date'][-len(y_test):], y_test, label='Actual Price', color='black')
    plt.plot(df['Date'][-len(y_test):], y_pred, label='Predicted Price (Random Forest)', linestyle='--', color='green')
    plt.title(f"{ticker} - Actual vs Predicted Closing Price")
    plt.xlabel("Date")
    plt.ylabel("Price")
    plt.legend()
    plt.grid()
    plt.show()